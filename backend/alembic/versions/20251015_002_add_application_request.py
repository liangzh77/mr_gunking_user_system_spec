"""Add ApplicationRequest model for app authorization requests

Revision ID: 20251015_002
Revises: 20251011_001
Create Date: 2025-10-15

添加application_requests表用于管理运营商的应用授权申请流程。
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '20251015_002'
down_revision = '20251011_001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # 创建application_requests表
    op.create_table(
        'application_requests',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, comment='主键'),
        sa.Column('operator_id', postgresql.UUID(as_uuid=True), nullable=False, comment='申请运营商ID'),
        sa.Column('application_id', postgresql.UUID(as_uuid=True), nullable=False, comment='申请的应用ID'),
        sa.Column('reason', sa.Text(), nullable=False, comment='申请理由'),
        sa.Column('status', sa.String(length=32), nullable=False, server_default='pending', comment='审核状态: pending/approved/rejected'),
        sa.Column('reviewed_by', postgresql.UUID(as_uuid=True), nullable=True, comment='审核人(管理员ID)'),
        sa.Column('reviewed_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='审核时间'),
        sa.Column('reject_reason', sa.Text(), nullable=True, comment='拒绝原因(status=rejected时)'),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='申请时间'),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='更新时间'),

        # 外键约束
        sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ondelete='RESTRICT'),
        sa.ForeignKeyConstraint(['operator_id'], ['operator_accounts.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['reviewed_by'], ['admin_accounts.id'], ondelete='SET NULL'),

        # 主键
        sa.PrimaryKeyConstraint('id'),

        # CHECK约束
        sa.CheckConstraint("status IN ('pending', 'approved', 'rejected')", name='chk_request_status'),
        sa.CheckConstraint("(status = 'rejected' AND reject_reason IS NOT NULL) OR status != 'rejected'", name='chk_reject_reason_required'),
        sa.CheckConstraint("(status IN ('approved', 'rejected') AND reviewed_by IS NOT NULL AND reviewed_at IS NOT NULL) OR status = 'pending'", name='chk_review_info_required'),
    )

    # 创建唯一索引: 同一运营商对同一应用只能有一条待审核的申请
    op.create_index(
        'uq_operator_app_pending',
        'application_requests',
        ['operator_id', 'application_id'],
        unique=True,
        postgresql_where=sa.text("status = 'pending'")
    )

    # 创建复合索引: 查询运营商的申请列表
    op.create_index('idx_request_operator', 'application_requests', ['operator_id', 'created_at'])

    # 创建复合索引: 管理员查看待审核申请
    op.create_index('idx_request_status', 'application_requests', ['status', 'created_at'])

    # 创建普通索引: 按应用查询申请
    op.create_index('idx_request_application', 'application_requests', ['application_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # 删除索引
    op.drop_index('idx_request_application', table_name='application_requests')
    op.drop_index('idx_request_status', table_name='application_requests')
    op.drop_index('idx_request_operator', table_name='application_requests')
    op.drop_index('uq_operator_app_pending', table_name='application_requests')

    # 删除表
    op.drop_table('application_requests')
    # ### end Alembic commands ###
