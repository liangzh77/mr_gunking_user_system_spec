name: CI/CD Pipeline

# 触发条件
on:
  push:
    branches: [ main, 001-mr, develop ]
  pull_request:
    branches: [ main ]
  # 允许手动触发
  workflow_dispatch:

# 环境变量
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.6.1'

jobs:
  # ==================== 代码质量检查 ====================
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 安装依赖
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black ruff mypy

    - name: Black 代码格式检查
      working-directory: ./backend
      run: |
        black --check src tests
      continue-on-error: false

    - name: Ruff 代码检查
      working-directory: ./backend
      run: |
        ruff check src tests

    - name: MyPy 类型检查
      working-directory: ./backend
      run: |
        mypy src --ignore-missing-imports
      continue-on-error: true  # 类型检查失败不阻塞

  # ==================== 后端测试 ====================
  backend-tests:
    name: 后端测试
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 安装依赖
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-xdist

    - name: 运行单元测试
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
        DEBUG: true
        ENCRYPTION_KEY: test_key_32_characters_long!!
        JWT_SECRET_KEY: test_jwt_secret_key_for_testing_32_chars_min
      run: |
        pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term -n auto

    - name: 运行集成测试
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
        DEBUG: true
        ENCRYPTION_KEY: test_key_32_characters_long!!
        JWT_SECRET_KEY: test_jwt_secret_key_for_testing_32_chars_min
      run: |
        pytest tests/integration -v --maxfail=3

    - name: 运行契约测试
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
        DEBUG: true
        ENCRYPTION_KEY: test_key_32_characters_long!!
        JWT_SECRET_KEY: test_jwt_secret_key_for_testing_32_chars_min
      run: |
        pytest tests/contract -v

    - name: 上传测试覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        fail_ci_if_error: false

  # ==================== 安全扫描 ====================
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装 Safety
      run: pip install safety

    - name: 依赖安全扫描
      working-directory: ./backend
      run: |
        safety check -r requirements.txt --json || true

    - name: Bandit 安全扫描
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json || true

    - name: 上传安全报告
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
      if: always()

  # ==================== Docker 镜像构建 ====================
  docker-build:
    name: Docker 镜像构建
    runs-on: ubuntu-latest
    needs: [backend-tests, security-scan]
    if: github.event_name == 'push'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.ref == 'refs/heads/main'

    - name: 构建后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mr-game-ops-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/mr-game-ops-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ==================== 性能测试（可选）====================
  performance-tests:
    name: 性能基准测试
    runs-on: ubuntu-latest
    needs: backend-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 安装依赖
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: 运行性能基准测试
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
        DEBUG: true
        ENCRYPTION_KEY: test_key_32_characters_long!!
        JWT_SECRET_KEY: test_jwt_secret_key_for_testing_32_chars_min
      run: |
        pytest tests/performance -v -m benchmark || true

    - name: 上传性能报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          backend/tests/performance/BASELINE.md
      if: always()

  # ==================== 部署到 Staging（可选）====================
  deploy-staging:
    name: 部署到 Staging 环境
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 部署到 Staging
      run: |
        echo "部署到 Staging 环境..."
        # 这里添加实际的部署脚本
        # 例如：
        # - SSH 到服务器
        # - 拉取最新镜像
        # - 重启服务
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}

  # ==================== 部署到 Production（可选）====================
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 部署到生产环境
      run: |
        echo "部署到生产环境..."
        # 这里添加实际的部署脚本
        # 建议使用金丝雀部署或蓝绿部署
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_KEY: ${{ secrets.PROD_SSH_KEY }}

  # ==================== 通知 ====================
  notify:
    name: 构建通知
    runs-on: ubuntu-latest
    needs: [backend-tests, docker-build]
    if: always()

    steps:
    - name: 发送通知
      run: |
        echo "CI/CD Pipeline 完成"
        echo "状态: ${{ job.status }}"
        # 这里可以添加钉钉、Slack、邮件通知等
