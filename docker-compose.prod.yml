# =============================================================================
# Docker Compose 配置 - 生产环境
# =============================================================================
# 说明：
# - 此配置用于生产环境部署
# - 移除了开发工具（pgadmin, redis-commander）
# - 使用生产级别的资源限制和安全配置
# - 添加了健康检查和日志管理
# - 前端使用 Nginx 提供静态文件服务
# =============================================================================
#
# 使用方法：
# 1. 复制 .env.production.template 为 .env.production 并配置
# 2. 运行: docker-compose -f docker-compose.yml up -d
# 3. 查看日志: docker-compose -f docker-compose.yml logs -f
# 4. 停止服务: docker-compose -f docker-compose.yml down
# =============================================================================

version: '3.8'

services:
  # PostgreSQL 数据库 (生产环境)
  postgres:
    image: postgres:14-alpine
    container_name: mr_game_ops_db_prod
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups  # 数据库备份目录
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - mr_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 缓存和会话存储 (生产环境)
  redis:
    image: redis:7-alpine
    container_name: mr_game_ops_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - mr_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # FastAPI 后端服务 (生产模式)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VERSION=${VERSION}
    container_name: mr_game_ops_backend_prod
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers 4 --log-level warning
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_invoices:/app/invoices
    expose:
      - "8000"  # 只在内部网络暴露
    env_file:
      - .env.production
    environment:
      # 数据库配置
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      # Redis配置
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      # 应用配置
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: WARNING
      # 安全配置
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      # CORS配置
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mr_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Vue 3 前端 + Nginx (生产模式)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
        - BUILD_DATE=${BUILD_DATE}
        - VERSION=${VERSION}
    container_name: mr_game_ops_frontend_prod
    expose:
      - "80"  # 只在内部网络暴露，由nginx代理
    depends_on:
      - backend
    networks:
      - mr_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx反向代理（含HTTPS支持 - T276）
  nginx:
    image: nginx:1.25-alpine
    container_name: mr_game_ops_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deploy/21088616_mrgun.chu-jiao.com_nginx/mrgun.chu-jiao.com.pem:/etc/ssl/certs/mrgun.chu-jiao.com.pem:ro
      - ./deploy/21088616_mrgun.chu-jiao.com_nginx/mrgun.chu-jiao.com.key:/etc/ssl/private/mrgun.chu-jiao.com.key:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - mr_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# 持久化存储卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_invoices:
    driver: local
  nginx_logs:
    driver: local

# 网络配置
networks:
  mr_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
